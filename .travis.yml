# Enable Lang
language: cpp

# Matrix
matrix:
  include:
  # windows msvc
  - os: windows
    env:
      - CONAN_SETTINGS_FLAG="-s compiler=\"Visual Studio\" -s compiler.version=15 -s arch=x86_64 -s build_type=Release -b missing"
      - CMAKE_GENERATOR_FLAG="-G \"Visual Studio 15 2017\" -DCMAKE_GENERATOR_PLATFORM=x64"
      - BUILD_CONFIG=Release
  # MacOS clang
  - os: osx
    osx_image: xcode10
    env:
      - compiler=clang
      - COMPILER_CC=clang
      - COMPILER_CXX=clang++
      - CONAN_SETTINGS_FLAG=""
      - CMAKE_GENERATOR_FLAG=""
      - BUILD_CONFIG=Release
  # Linux gcc
  - os: linux
    dist: xenial
    env:
      - COMPILER=g++-8
      - COMPILER_CC=gcc-8
      - COMPILER_CXX=g++-8
      - CONAN_SETTINGS_FLAG="-s compiler.libcxx=libstdc++11"
      - CMAKE_GENERATOR_FLAG="-G \"Unix Makefiles\""
      - BUILD_CONFIG=Release
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['gcc-8', 'g++-8' ]

# The pre-install script. On windows it will install conan via chocolatey
install:
  - |
     if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
       choco install conan
     else
       pip install --user --upgrade pip
       pip install --user conan --upgrade
     fi
# Setup Build
before_script:
  # The path to conan does not get set properly because travis does not restart the shell
  # so we ahve to manually add the path it on Windows.
  - if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then export PATH=$PATH:/c/Program\ Files/Conan/conan; fi
  - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then export PATH=$PATH:/Users/travis/Library/Python/2.7/bin; fi
  
  - if [ -f conanfile.txt ]; then export USE_CONAN=TRUE; fi
  
  - if [[ "${USE_CONAN}" == "TRUE" ]]; then conan user; fi
  - if [[ "${USE_CONAN}" == "TRUE" ]]; then conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan; fi

  - if [[ "${COMPILER_CXX}" != "" ]]; then export CXX=${COMPILER_CXX}; fi
  - if [[ "${COMPILER_CC}" != "" ]]; then export CC=${COMPILER_CC}; fi

# Build and Test
script:
  # Import Environment
  - env
  # Conan Build
  - mkdir conan && cd conan
  - if [[ "${USE_CONAN}" == "TRUE" ]]; then eval conan install .. ${CONAN_SETTINGS_FLAG}; fi
  - cd ..
  # Cmake Build
  - mkdir build && cd build
  - eval cmake .. ${CMAKE_GENERATOR_FLAG}
  - eval cmake --build . --config "${BUILD_CONFIG}"